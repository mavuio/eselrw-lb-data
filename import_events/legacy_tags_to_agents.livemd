# Legacy tags --> Agents (2024-05-29)

```elixir
use QuickAlias, MyAppWeb
use QuickAlias, MyAppBe
use QuickAlias, MyApp

require Ecto.Query
require Ash.Query
import Ecto.Query
import MavuBuckets
```

## Section

```elixir
# find all legacy events with  legacy tags

defmodule Helper do
  def extract_tags(tagstr) do
    # "#{tagstr}"  
    # |> String.split(",", trim: true)
    ["#{tagstr}"]
    |> CSV.decode()
    |> Enum.into(%{})
    |> case do
      %{ok: tagstrings} ->
        tagstrings

      _ ->
        []
    end
    |> Enum.map(&clean_str/1)
    |> Enum.reject(&MavuUtils.empty?/1)
  end

  def clean_str(str) do
    str
    |> String.replace(~w(ä Ä), "ae")
    |> String.replace(~w(ö Ö), "oe")
    |> String.replace(~w(ü Ü), "ue")
    |> Slug.slugify()
  end
end
```

```elixir
# Tags aus allen Legacy-Events holen:

tags_to_map =
  MyApp.LegacyEvent
  |> select([e], e.tags)
  |> distinct([e], e.tags)
  |> limit(100)
  |> Repo.all()
  |> Enum.flat_map(&Helper.extract_tags/1)
  |> Enum.frequencies()
  |> Map.to_list()
  |> Enum.map(fn {tag, num} -> %{tag: tag, count: num} end)
  |> Enum.sort_by(& &1.count, :desc)

tags_to_map |> Kino.DataTable.new()
```

```elixir
# find out which tags map to Agents:

mapped_tags =
  tags_to_map
  |> Enum.map(fn tagrec ->
    Agent.get_by_slug(tagrec.tag)
    |> case do
      {:ok, rec} ->
        tagrec |> Map.put(:agent_name, rec.title) |> Map.put(:agent_id, rec.id)

      {:error, error_info} ->
        tagrec |> Map.put(:agent_name, nil) |> Map.put(:agent_id, nil)
    end
  end)
  |> Enum.reject(fn x -> is_nil(x.agent_id) end)

mapped_tags |> Kino.DataTable.new()
```

```elixir
defmodule AgentRelationImporter do
  def assign_agents_in_event(legacy_event, agents_to_assign) do
    tags = Helper.extract_tags(legacy_event.tags)

    agents =
      tags
      |> Enum.map(fn tagstr ->
        agents_to_assign
        |> Enum.find(&(&1.tag == tagstr))
        |> case do
          nil ->
            nil

          %{agent_name: agent_name, agent_id: agent_id} ->
            %{tag: tagstr, agent_name: agent_name, agent_id: agent_id}
        end
      end)
      |> Enum.reject(&is_nil/1)

    if length(agents) > 0 do
      Event.get_by_legacy_event_id(legacy_event.id)
      |> case do
        {:ok, ev} ->
          for %{agent_id: agent_id} = agentrec <- agents do
            MyApp.Agents.assign_agent_to_event(agent_id, ev.id)
          end

          %{
            ev: ev.title,
            ev_id: ev.id,
            agents: agents |> Enum.map(fn a -> a.agent_name end) |> Enum.join(", ")
          }

        {:error, error_info} ->
          %{
            ev: "not found",
            ev_id: nil,
            agents: agents |> Enum.map(fn a -> a.agent_name end) |> Enum.join(", ")
          }
      end
    end
  end
end
```

```elixir
MyApp.LegacyEvent
|> limit(100_000_000)
|> Repo.all()
|> Enum.map(&AgentRelationImporter.assign_agents_in_event(&1, mapped_tags))
|> Enum.reject(&is_nil/1)
# |> Enum.reject( &MavuUtils.empty?(&1.agents))
|> Kino.DataTable.new()
```
